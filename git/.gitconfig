[init]
	defaultBranch = main
[apply]
  # Detect whitespace errors when applying a patch
  whitespace = fix
[alias]
	undo = reset --soft HEAD^
	# Not quite as common as an amend, but still common
	# https://git-scm.com/docs/git-reset#git-reset-emgitresetemltmodegtltcommitgt

	stash-all = stash save --include-untracked
	# We wanna grab those pesky un-added files!
	# https://git-scm.com/docs/git-stash

	glog = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset'
	# No need for a GUI - a nice, colorful, graphical representation
	# https://git-scm.com/docs/git-log
	ap = "!git add -p"

  branch-name = "!git rev-parse --abbrev-ref HEAD"

  # View abbreviated SHA, description, and history graph of the latest 20 commits
  l = log --pretty=oneline -n 20 --graph --abbrev-commit
  ll = log --pretty=oneline -n 50 --graph --abbrev-commit
  lg = log --pretty=oneline --graph --abbrev-commit
  graph = log --graph --all --decorate --stat --date=iso

  # View the current working tree status using the short format
  s = status -s

  # Show the diff between the latest commit and the current state
  d = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"

  # `git di $number` shows the diff between the state `$number` revisions ago and the current state
  di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"

  # `git sf $sha` shows only the files in commit
  sf = "!f() { git diff-tree --no-commit-id --name-only -r $1; }; f"

  # fetch with prune
  fp = fetch --prune

  # Submodule sync
  subsync = !"git submodule sync; git submodule update --init"

  # Pull in remote changes for the current repository and all its submodules
  plsm = !"git pull; git submodule foreach git pull origin master"

  # Pull with rebase
  plreb = !"git pull --rebase"

  # Clone a repository including all submodules
  c = clone --recursive

  # Commit all changes
  ca = !git add -A && git commit -av

  # Semantic commit messages
  # credit: https://github.com/fteem/git-semantic-commits
  c-build = "!f() { if [ -z \"$1\"  ]; then git commit -m \"build: \" -e; elif [ -z \"$2\" ]; then git commit -m \"build: $1\"; else git commit -m \"build($1): $2\"; fi }; f"
  c-chore = "!f() { if [ -z \"$1\"  ]; then git commit -m \"chore: \" -e; elif [ -z \"$2\" ]; then git commit -m \"chore: $1\"; else git commit -m \"chore($1): $2\"; fi }; f"
  c-ci = "!f() { if [ -z \"$1\"  ]; then git commit -m \"ci: \" -e; elif [ -z \"$2\" ]; then git commit -m \"ci: $1\"; else git commit -m \"ci($1): $2\"; fi }; f"
  c-docs = "!f() { if [ -z \"$1\"  ]; then git commit -m \"docs: \" -e; elif [ -z \"$2\" ]; then git commit -m \"docs: $1\"; else git commit -m \"docs($1): $2\"; fi }; f"
  c-feat = "!f() { if [ -z \"$1\"  ]; then git commit -m \"feat: \" -e; elif [ -z \"$2\" ]; then git commit -m \"feat: $1\"; else git commit -m \"feat($1): $2\"; fi }; f"
  c-fix = "!f() { if [ -z \"$1\"  ]; then git commit -m \"fix: \" -e; elif [ -z \"$2\" ]; then git commit -m \"fix: $1\"; else git commit -m \"fix($1): $2\"; fi }; f"
  c-localize = "!f() { if [ -z \"$1\"  ]; then git commit -m \"localize: \" -e; elif [ -z \"$2\" ]; then git commit -m \"localize: $1\"; else git commit -m \"localize($1): $2\"; fi }; f"
  c-perf = "!f() { if [ -z \"$1\"  ]; then git commit -m \"perf: \" -e; elif [ -z \"$2\" ]; then git commit -m \"perf: $1\"; else git commit -m \"perf($1): $2\"; fi }; f"
  c-refactor = "!f() { if [ -z \"$1\"  ]; then git commit -m \"refactor: \" -e; elif [ -z \"$2\" ]; then git commit -m \"refactor: $1\"; else git commit -m \"refactor($1): $2\"; fi }; f"
  c-revert = "!f() { if [ -z \"$1\"  ]; then git commit -m \"revert: \" -e; elif [ -z \"$2\" ]; then git commit -m \"revert: $1\"; else git commit -m \"revert($1): $2\"; fi }; f"
  c-style = "!f() { if [ -z \"$1\"  ]; then git commit -m \"style: \" -e; elif [ -z \"$2\" ]; then git commit -m \"style: $1\"; else git commit -m \"style($1): $2\"; fi }; f"
  c-test = "!f() { if [ -z \"$1\"  ]; then git commit -m \"test: \" -e; elif [ -z \"$2\" ]; then git commit -m \"test: $1\"; else git commit -m \"test($1): $2\"; fi }; f"
  c-ux = "!f() { if [ -z \"$1\"  ]; then git commit -m \"ux: \" -e; elif [ -z \"$2\" ]; then git commit -m \"ux: $1\"; else git commit -m \"ux($1): $2\"; fi }; f"

  c-semantic = "!f() { echo \"build, chore, ci, docs, feat, fix, localize, perf, refactor, revert, style, test, ux\"; }; f"

  # Switch to a branch, creating it if necessary
  go = "!f() { git checkout -b \"$1\" 2> /dev/null || git checkout \"$1\"; }; f"

  # Become
  become = "!git checkout -B \"$(git symbolic-ref --short HEAD)\""

  # Show verbose output about tags, branches or remotes
  tags = tag -l
  branches = branch -a
  bv = branch -vv
  remotes = remote -v

  # List aliases
  aliases = config --get-regexp alias

  # Amend the currently staged files to the latest commit
  amend = commit --amend --reuse-message=HEAD

  # Credit an author on the latest commit
  credit = "!f() { git commit --amend --author \"$1 <$2>\" -C HEAD; }; f"

  # Interactive rebase with the given number of latest commits
  reb = "!r() { git rebase -i HEAD~$1; }; r"

  # Remove the old tag with this name and tag the latest commit with it.
  #retag = "!r() { git tag -d $1 && git push origin :refs/tags/$1 && git tag $1; }; r"

  # Find branches containing commit
  fbc = "!f() { git branch -a --contains $1; }; f"

  # Find tags containing commit
  ftc = "!f() { git describe --always --contains $1; }; f"

  # Find commits by source code
  fcc = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"

  # Find commits by commit message
  fcm = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"

  # Remove branches that have already been merged with master
  # a.k.a. ‘delete merged’
  #dbmm = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"

  # "Delete Branch For Real"
  #dbfr = "!git branch -D && git push origin :$1"

  # List contributors with number of commits
  contributors = shortlog --summary --numbered

  # Recap
  recap = log --all --oneline --no-merges --author="aaron@aaronbates.me"

  # Today
  today = log --since=00:00:00 --all --no-merges --oneline --author="aaron@aaronbates.me"

  # Upstream
  upstream = "!f() { \
    declare head=\"${1:-HEAD}\"; \
    declare currentBranch=\"$(git symbolic-ref --short HEAD)\"; \
    declare branch=\"${2:-$currentBranch}\"; \
    git log --oneline --no-merges $head..origin/$branch; \
  }; f"

  # Local
  local = "!f() { \
    declare head=\"${1:-HEAD}\"; \
    declare currentBranch=\"$(git symbolic-ref --short HEAD)\"; \
    declare branch=\"${2:-$currentBranch}\"; \
    git log --oneline --no-merges origin/$branch..$head; \
  }; f"

  # Merge GitHub pull request on top of the current branch or,
  # if a branch name is specified, on top of the specified branch
  #mpr = "!f() { \
  #  declare currentBranch=\"$(git symbolic-ref --short HEAD)\"; \
  #  declare branch=\"${2:-$currentBranch}\"; \
  #  if [ $(printf \"%s\" \"$1\" | grep '^[0-9]\\+$' > /dev/null; printf $?) -eq 0 ]; then \
  #    git fetch origin refs/pull/$1/head:pr/$1 && \
  #    git checkout -B $branch && \
  #    git rebase $branch pr/$1 && \
  #    git checkout -B $branch && \
  #    git merge pr/$1 && \
  #    git branch -D pr/$1 && \
  #    git commit --amend -m \"$(git log -1 --pretty=%B)\n\nCloses #$1.\"; \
  #  fi \
  #}; f"
[core]
	# convert CRLF to LF on commit, but not the other way around
  autocrlf = input
	# Use custom `.gitignore` and `.gitattributes`
	excludesfile = ~/.gitignore
  attributesfile = ~/.gitattributes

	# Make `git rebase` safer on macOS
  # More info: <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>
  trustctime = false

  # Prevent showing files whose names contain non-ASCII symbols as unversioned.
  # http://michael-kuehnel.de/git/2014/11/21/git-mac-osx-and-german-umlaute.html
  precomposeunicode = false

	editor = code -n --wait
	whitespace = fix,space-before-tab,-indent-with-non-tab,trailing-space
[web]
	browser = google-chrome
[gitflow "prefix"]
	feature = feature-
	release = release-
	hotfix = hotfix-
	support = support-
	versiontag = v
[push]
	default = simple
[pull]
	rebase = false
[help]
  # Automatically correct and execute mistyped commands
  autocorrect = 1
[diff]
    tool = default-difftool
[difftool "default-difftool"]
    cmd = code --wait --diff $LOCAL $REMOTE
[merge]
	# only accept fast-forward merges
  ff = only

  # Include summaries of merged commits in newly created merge commit messages
  log = true
	tool = default-difftool
[mergetool "default-difftool"]
    cmd = code --wait $MERGED
[color]
	status = always
	branch = auto
	diff = auto
	showbranch = auto
	ui = true
[color "branch"]
	current = yellow bold
	local = green bold
	remote = cyan bold
[color "diff"]
	meta = yellow bold
	frag = magenta bold
	old = red bold
	new = green bold
	whitespace = red reverse
[color "status"]
	added = green bold
	changed = yellow bold
	untracked = red bold
[status]
	showUntrackedFiles = all
	# Sometimes a newly-added folder, since it's only one line in git status, can slip under the radar.
	# https://git-scm.com/docs/git-config#git-config-statusshowUntrackedFiles
[url "git@github.com:"]
  insteadOf = "gh:"
  pushInsteadOf = "github:"
  pushInsteadOf = "git://github.com/"

[url "git://github.com/"]
  insteadOf = "github:"

[url "git@gist.github.com:"]
  insteadOf = "gst:"
  pushInsteadOf = "gist:"
  pushInsteadOf = "git://gist.github.com/"

[url "git://gist.github.com/"]
  insteadOf = "gist:"
[Include]
  # Local modifications that shouldn't be stored in a repo.
  path = "./.gitconfig.local"